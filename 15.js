//15 let, const 키워드와 블록 스코프


/**
 * es5까지 변수를 선언할수 있는 유열방번은 var 키워드였으나
 * es6부터 const, let 사용가능
 */

//15.1.1
//var 키워드로 선언한 변수는 중복선언이 가능함

//15 - 1
var x = 1;
var y = 1;

/**
 * var 키워드로 선언된 변수는 같은 소코프내에서 중복선언 허용
 * 초기화문이 있는 변수 선언문은 js엔진에 의해 var키워드가 없는것처럼 동작
 * 
 *
 */

var x = 100;
var y;
console.log(x); // 100
console.log(y); // 1

/**
 * var 키워드로 선언한 x변수와 y변수는 중복선언됨
 * var 키워드로 선언한 변수를 중복선언하면 초기화문 유무에 다르게 동작함
 * 초기화문이있는 변수 선언문은 js  엔젠에 의해 var 키워드가 없는것처럼 동작하고 초기화문이 없는 변수 선언문은 무시되며 에러발생 x
 */

//15.1.2 함수레벨스코프
var x = 1;
if (true) {
    var x = 10;
}
console.log(x); //10

var i = 10;
for (var i = 0; i < 5; i++) {
    console.log(i); // 0 1 2 3 4 
}
console.log(5)

/**
 * 함수레벨 스코프는 전역변수를남발할 가능성을 높임
 * 이로인해 의도치않게 전역변수가 중복선언되는 경우 발생됨
 */

//15.1.3 변수 호이스팅
/**
 * var 키워드로 변수를 선언하면 변수 호이스팅에 의해 변수 선언문이 스코프의 선두로 끌어올려진것처럼 동작함
 * 변수 호이스팅에 의해 var 키워드로 선언한 변수는 변수 선언문 이전에 참조할 수 있음
 */


// let 키워드
//15.2.1
/**
 * var 키워드로 이름이 동일한 변수를 중복선언하면 에러가 발생안됨
 * 이떄 변수를 ㅅ중복선언하면서 값까지 할당했다면 의도치않게 먼저 선언된 변수값이 재할당되어 변경되는 부작용이 발생
 * 
 * let 사용시 이름이 같은 변수를 선언하면 문법에러가 발생
 */

//15.2.2
/**
 * var 키워드로 선언한 변수는 오로지 함수의 코드불록만을 지역 스코프로 인정하는 ㅠㅏㅁ수 레벨 스코프를 따른다
let 키워드로 선언한 변수는 모든 코드블럭을 지역 스코프로 인정하느 블록 래ㅔ벨 스코프를 따름
 */

// 15 - 6
let foo = 1;
{
    let foo = 2;
    let bar = 3;
}
console.log(foo); //1
console.log(bar); //에러