/**
 * 함수
 * js에서 중요한 핵심 개념
 * js의 핵심 개념인 스코프, 실행컨텍스트, 클로저, 생성자 함수에 의한 객체생성, 메서드, this, 프로퍼타입
 * 모듈화 등등 함수와 깊은 관련이있음
 * 
 * 함수는 js를 정확히 이해하고  사용하기 위해서 가장 중요
 * 
 * input > output 이 존재함
 */

//12 - 1
// f(x, y) = x + y
function add(x, y) {
    return x + y;
}

// f (2, 5) = 7
add(2, 5); //7

/**
 * 함수는 일련의 과정을 문으로 구현하고 코드블럭으로 감싸서 한의 실행단위로 정의한것
 * 함수도 입력을 받아서 출력을 내보냄
 * 
 * 함수내부로 입력을 전달 받는 변수를 매개변수
 * 입력을 인수
 * 출력을 반환값
 * 
 * 함수는 값이며, 여러개 존재할수 있으므로 특정함수를 구별하기 위해 식별자인 함수 이름을 사용할 수 있음
 * 함수정의를 통해 생성
 * js의 함수는 다양한방법으로 정의 가능 
 */

// 12 - 2
//함수 정의
function add(x, y) {
    return x + y;
}
// 함수 정의만으로 함수가 실행되지는 아님
/**
 * 수학의 함수처럼 미리 정의된 일련의 과정을 실행하기 위해
 * 필요한 입력, 인수를 매개변수를 통해 함수에 전달하면서
 * 함수의 실행을 명시적으로 지시 해야함
 * 함수 호출이라고함
 * 함수를 호출하면 코드블록에 담긴 문들이 일괄적으로 실행되고, 실행 결과 즉 반환값을 반환함
 */

// 12 - 3
// 함수 호출 예시
var result = add(2, 5);
//함수 add에 인수 2,5를 전달하면서 호출하면 7이 반환됨
console.log(result); // 7

/**
 * 함수 사용 이유
 * 
 * 함수는 필요할떄 여러번 호출할 수 있음
 * 실행시저믕ㄹ 개발자가 결정할수 있고 몇번이든 재사용이 가능함
 * 
 * 동일한 작업을 반복적으로 수행해야한다면 같은 코드를 중복해서 여러번 작성하는것은 아니다
 * 미리 정의 된 함수를 재사용하는것이 효율적
 * 
 * 함수는 몇번이든 호출할 수 있으므로 코드의 재사용이라는 측면에서 유용함
 */

/**
 * 함수를 사용하지 않고 같은 코드를 중복해서 여러번 작성하면 코드를 수정해야할때 중복된 횟수만큼
 * 코드를 수정해야함
 * 
 * 따라서 중복된 횟수에 비례해서 코드수정에 걸리는 시간이 증가함
 *실수할 가능성도 높아짐 
 *
 * 코드의 중복을 억제하고 재사용성을 높이는 함수는 "유지보수의 편의성"을 높이고 실수를 줄여 "코드의 신뢰성"을 높이는 효과가 있음
 * 함수는 객체 타입이므로 식별자를 붙일수있음 
 * 함수이름은 변수이름과 마찬가지로 함수 자신의 역할을 잘 설명해야함
 * 적절한 함수 이름은 함수의 내부 코드를 이해하지 않고도 함수의 역할을 파악할수 있게 도움을 줌
 * 이는 "코드의 가독성"을 향상시킴
 * 
 * 코드는 동작하는것만이 존재목적이 아님
 */

/**
 * 12.3 함수 리터럴
 * 
 * 자바스크립트의 함수는 객체 타입의 값
 * 숫자값을 숫자리터럴로 생성하고 객체를 객체리터럴로 생성하듯이 함수도 함수리터럴로 생성가능
 * 함수 리터럴은 function 키워드, 함수이름, 매개변수목록, 함숨몸체로 구성됨
 */

// 12 - 4
//변수에 함수 리터럴을 할당
var f = function add(x, y) {
    return x + y;
};

/**
 * 함수리터럴의 구성요성
 */

/**
 * 함수이름 
 * 
 * 함수이름은 식별자이므로 네이밍 규칙을 준수해야함
 * 함수이름은 함수 몸체 내에서만 참조할 수 있는 식별자
 * 함수이름은 생략할 수 있음 
 * 이름이 있는 함수를 기명 함수, 이름이 없는 함수를 무명/익명 함수라고하 지칭
 * 
 */

/**
 * 매개변서 목록
 * 
 * 0개이상의 매개변수를 소활로 감싸고 쉼표로 구분
 * 각 매개변수에는 함수를 호출할때 지정한 인수가 순서대로 할당함
 * 매개변수 목록은 순서에 의미가 있음
 * 매개변수는 함수 몸체 내에서 변수와 등일하게 취급됨
 * 따라서 매개변수도 변수와 마찬가지로 식별자 네이밍 규칠을 준수해야함
 */

/**
 * 함수 몸체
 * 
 * 함수가 호출되었을때 일괄적으로 실행될 문들을 하나의 실행 단위로 정의한 코드블럭
 * 함수 몸체는 함수 호출에 의해 실행됨
 */


/**
 * 함수정의
 * 함수를 호출하기 이전에 인수를 전달받을 매개변수와 실행할 문들, 그리고 반한된 값을 지정하는것을 의미
 * 정의된 함수는 js엔젠에의해 평가되어 함수객체가 됨
 */

/**
 * 함수선언문
 * function add(x, y) {
 *  return x + y;
 * }
 */

/**
 * 함수 표현식
 * var add = function(x, y) {
 *  return x + y;
 * }
 */


/**
 * Function 생성자 함수
 * var add = new Function('x', 'y', 'return x + y');
 */

/**
 * 화살표 함수 (es6)
 * var add = (x, y) => x + y;
 */

/**
 * 변수 선언과 함수 정의
 * 변수는 선언이라고 하지만 함수는 정의라고 편함
 * 함수 선언문이 평가되면 식별자가 암묵적으로 생성되고 함수객체가 할당됨
 * ecmascript 사양에서도 변수에는 선언, 함수에는 정의라고 표현함
 */

/**
 * 12.4.1 함수 선언문
 */

// 12 - 5


function add(x, y) {
    return x + y;
}

/**
 * 함수 참조
 * console.dir 은 console.log와는 달리 함수 객체의 프로퍼티까지 출력함
 * node.js 환경에서는 console.log와 같은 결과가 출력됨
 */
console.dir(add); // add(x, y)

//함수 호출
console.log(add(2, 5)); // 7

/**
 * 
 * 함수 선언문은 함수 리터럴과 형태가 동일
 * 함수 리터럴은 함수 이름을 생략할 수 있으나, 함수 선언문은 함수 이름을 생략 할 수 없음
 */

// 12 - 6

//함수 선언문은 함수 이름을 생략할 수 없음
// function (x, y) {
//     return x + y;
// }

/**
 * 함수 선언문은 표현식이 아닌 문
 * 크롬 개발자 도구의 콘솔에서 함수 선엄누을 실행하면 완료값 undefined가 출력
 * 함수 선운문이 만약에 표현식인 문이라면 완료값 undefined 대신 표현식이 평가되어
 * 생성된 함수가 출력되어야함
 */

// 12 - 7
/**
 * 함수 선언문은 표현식이 아닌 문이므로 변수에 할당x
 * 함수 선어문이 변수에 할당되는것처럼 보임
 */

var add = function add(x, y) {
    return x + y;
};

console.log(add(2, 5)); // 7

/**
 * 위코드처럼 동작하는 이유는 js엔진이 코드의 문맥에 따라 동일한 함수 리터럴을 표현식이아닌
 * 문인 함수 선언문으로 해석되는 경우와 표현식인 문인 함수 리터럴 표현식으로 해석하는 경우가 있기 때문임
 * 
 * 함수 선언문은 함수 이름을 생략할 수 없다는 점을 제외하면 함수 리터럴과 형태가 동일
 * 
 * 함수이름이 있는 기명 함수 리터럴은 함수 선언문 또는 함수 리터럴 표현식으로 해석될 가능성이있다는 의미
 */

// 12 - 8

/**
 * 기명 함수 리터럴을 단독으로 사용하면 함수 선언문으로 해석됨
 * 함수 선언문에서는 함수 이름을 생략할수 없음
 */

function foo() { console.log('foo');}

foo(); // foo

/**
 * 함수 리터럴을 피연산자로 사용하면 함수 선언문이 아니라 함수 리터럴 표현식으로 해석됨
 * 함수 리터럴에서는 함수 이름을 생략할 수 있음
 */

// (function bar() {console.log('bar');});
// bar(); // 

// 12 - 9
var add = function add(x, y) {
    return x + y;
};
console.log(add(2, 5));

/**
 * 함수는 함수이름으로 호출되는것이아니라 함수객체를가리키는 식별자로호출함
 */

/**
 * 12.4.2 함수표현식
 * 
 * js의 함수는 객체 타입의 값
 * 자바스크립의 함수는 값처럼 변수에 할당 할 수도 있고
 * 프로퍼티 값이 될 수도 있으며
 * 배열의 요소가 될수도있음
 * 
 * 이처럼 값의 성질을 갖는 객체를 일급객체라고함 
 * js의 함수는 일급객체
 * 
 * 함수가 일급객체라는것은 함수를 값처럼 자유롭게 사용할 수 있다는 의미
 * 
 * 함수는 일급 객체이므로 함수 리터럴로 생성한 함수 객체를 변수에 할당 할 수 있음
 * 이러한 함수 정의 방식을 함수 표현식이라고함 
 * 함수 선언문으로 정의한 add 함수를 함수 표현식으로 바꿔서 정의할 경우 하단 코드와 같음
 */

// 12 - 10
//함수 표현식
var add = function (x, y) {
    return x + y;
};

console.log(add(2, 5)); // 7

/**
 * 함수 리터럴의 함수 이름은 생략가능
 * 이러한 함수를 익명함수라고함
 * 함수 표현식의 함수 리터럴은 함수 이름을 생략하는것이 일반적
 * 
 * 함수 선언문에서 살펴본 바와같이 함수를 호출할때는 함수 이름이 아니라 
 * 함수 객체를 가리키는 식별자를 사용해야함
 * 
 * 함수이름은 함수 몸체 내부에서만 유효한 식별자이므로 함수 이름으로 함수를 호출할 수 없음
 */

//12 - 11

//기명 함수 표현식
var add = function foo (x, y) {
    return x + y
}

// 함수객체를 가리키는 식별자로 호출
console.log(add(2, 5)); // 7

/**
 * 함수 이름으로 호출하면 referenceError가 발생
 * 함수 이름은 함수 몸체 내부에서만 유효한 식별자
 */

// console.log(foo(2, 5));  << referenceError: foo is not defined 에러 생성

/**
 * js 엔진은 함수 선언문의 함수 이름으로 식별자를 암묵적으로 생성하고 생성된 함수 객체를 할당하므로
 * 함수 표현식과 유사하게 동작하는것처럼 보임
 * 
 * 하지만 함수 선언문과 함수 표현식이 정확히 동일하게 동작하지는 않음
 */

//함수 참조
console.dir(add); // f add(x, y)
console.dir(sub); // undefined

//함수 호출
console.log(add(2, 5)); // 7
console.log(sub(2, 5)); // 타입에러

//함수 선언문
function add(x, y) {
    return x + y;
}

//함수 표현식 
var sub = function (x ,y) {
    return x - y;
}

//12.4.4
/**
 * js가 기본 제공하는 빌트인 함수인 Function 생성자 함수에는 매개변수 목록과 함수 몸체를 문자열로 전달하면서
 * new  연산자와 함꼐 호출하면 함수객체를 생성해서 반환
 * 
 * new 연산자없이 호출해도 결과는동일
 */

//12 - 13
var add = new Function('x', 'y', 'return x + y');
console.log(add(2, 5));

/**
 * Function 생성자 함수로 함수를 생성하는 방식은 일반적이지 않으며, 바람직하지도 않음
 * 
 * Function 생성한 함수는 클로저를 생성하지 않는 등 함수 선언문이나 함수표현식으로 생성한 함수와 다르게 작동함
 */

// 12 - 14

var add1 = (function () {
    var a = 10;
    return function (x, y) {
        return x + y + a;
    };
}());

console.log(add1(1, 2)); // 13

var add2 = (function () {
    var a = 10;
    return new Function('x', 'y', 'return x + y + a;');
}());

console.log(add2(1, 2)); // 레퍼런스 에러발생

// 12.4.5 화살표함수
/**
 * es6에 도임된 화살표함수는 function 키워드 대신 화살표를 사용해
 * 좀더 간략한 방법으로 함수 선언할 수 있음
 * 화살표 함수는 항상 익명함수로 정의
 */
//12 - 15
const add = (x, y) => x + y;
console.log(add(2, 5)); // 7