/**
 * 13 스코프
 * 프로그래밍 언어의 기본적이며 중요한 개념
 * 
 * var 키워드로 선언한 변수와 let, const 키워드로 선언한 변수의 스코프도 다르게 작동
 * 스코프는 변수및 함수와 깊은 관련이있음
 */

// 13 - 1
function add(x, y) {
    /**
     * 매개변수는 함수 몸체 내부에서만 참조할 수 있음
     * 즉, 매개변수의 스코프는 함수 몸체 내부
     */
    console.log(x, y);
    return x + y;
}
add(2, 5);
// 매개 변수는 함수 몸체 내부에서만 참조 할 수 있음
console.log(x, y); // 레퍼런스 에러발생

/**
 * 변수는 코드의 가장 바깥 영역뿐 아니라 코드 블록이나 함수 몸체 내에서도 선언가능
 * 이때 코드블록이나 함수는 중첩될 수 있음
 */

// 13 - 2
var var1 = 1; // 코드의 가장 바깥 영역에서 선언한 변수

if (true) {
    var var2 = 2; // 코드 블록 내에서 선언한 변수
    if (true) {
        var var3 = 3;
    }
}

function foo() {
    var var4 = 4; // 함수 내에서 선언한 변수
    function bar() {
        var var5 = 5; // 중첩된 함수내에서 선언한 변수
    }
}
console.log(var1); // 1
console.log(var2); // 2
console.log(var3); // 3
console.log(var4); // 레퍼런스에러
console.log(var5);  // 레퍼런스 에러

/**
 * 변수는 자신이 선언된 위치에 의해 자신이 유효한 범위, 즉 다른 코드가 변수 자신을 참조할수 있는 범위가 결정
 * 변수뿐만 아니라 모든 식별자가 동일
 * 모든 식별자 (변수이름, 함수 이름 ,클래스 이름 등등 )는 자신이 선언된 위치에 의해 다른코드가 식별자 자신을 참조할 수 있는 유효범위가 결정
 * 이를 스코프라고 지칭 즉, 소코프는 식별자가 유효한 범위를 말함
 */

// 13 - 3
var x = 'global';

function foo() {
    var x = 'local';
    console.log(x);
}

foo();
console.log(x)

/**
 * 코드의 가장 바깥 영역과 foo함수 내부에 같은 이름을 갖는 x 변수를 선언했고 1,2에서 x 변수를 참조함
 * 
 * 이때 js엔진은 이름이 같은 두개의 변수 중에서 어떤 변수를 참조해야할것인지를 결정해야함
 * 이를 식별자 결저잉라고함
 * 
 * js엔진은 스코프를 통해 어떤 변수를 참조할것인지 결정
 * 스코프란 js 엔진이 식별자를 검색할때 사용하는 규칙이라고할수 있음
 * 
 * js 엔진은 코드를 실행할때 코드의 문맥을 고려함
 * 코드가 어디서 실행되며 주변에 어떤 코드가있는지에 따라 예제처럼 동일한 코드도 다른 결과가 나옴
 * 
 * 13 - 2 예제에서 코드의 가장 바깥 영역에 선언된 x 변수는 어디서든 참조할 수 있음
 * 하지만 foo 함수 내부에서 선언된 x 변수는 foo 함수 내부에서만 참조할 수 있고 foo 함수 외부에서는 참조 할 수 없음
 * 
 * 이때 두개의 x 변수는 식별자 이름이 동일하지만 자신이 유효한 범위, 즉 소코프가 다른 별개의 변수
 * 
 * 스코프라는 개념이 없다면 같은 이름을 갖는 변수는 충돌을 일으키므로 프로그램 전체에서 하나밖에 사용할수없음
 * 
 * 변수나 함수의 이름과 같은 식별자는 어떤값을 구별하여 식별 해낼 수 있는 고유한 이름을 말함
 * 사람을 고유한 이름으로 구별하듯이 값도 사람이 이해할수 있는 언어로 지정한 고유한 식별자인 변수이름에 의해 구별해여 참조할 수 있음
 * 
 * 식별자는 어떤 값을 구별할 수 있어야 하므로 유일해야함
 * 
 * 따라서 식별자인 변수 이름은 중복될 수 없음
 * 즉 하나의 값은 유일한 식별자에 연결되어야함
 * 
 * 예를 들어, 파일 이름은 하나의 파일을 구별하여 식별할 수 있는 식별자임
 * 
 * 식별자인 파일 이름은 유일해야한다 하지만, 컴퓨터를 사용할때 하나의 파일이름만 사용하지 않음
 * 
 * 식별자인 파일 이름을 중복해서 사용할 수 이유는 폴더라는 개념이 있기 때문에 가능
 * 
 * 만약 폴가 없다면 파일 이름은 유일해야함
 * 
 * 컴퓨터 전체를 통틀어 하나의 파일이름만 사용해야 한다면 파일 이름을 만드는 것이 무척이나 번거로워짐
 * 
 * 프로그래밍언어 에서는 스코프를 통해 식별자인 변수 이름의 충돌을 방지하여 같은 이름의 변수를 사용할 수 있게함
 * 스코프 내 에서 식별자는 유일해야 하지만 다른 스코프에는 동일한 이름의 식별자를 사용할 수 있음
 * 즉, 스코프는 네임스페이스 임
 */

// var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언이 허용됨
// 의도치않게 변수값이 재할당되어 변경되는 부작용을 발생시킨다.

// 13 - 4
// var 키워드 사용 예시
function foo() {
    var x = 1;
    // var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용함
    // 아래 변수 선언문의 js 엔진의 의해 var 키워드가 없는것처럼 동작함
    var x = 2;
    console.log(x); // 2
}
foo();

// let이나 const 키워드로 선언된 변수는 같은 스코프내에서 중복선언 허용하지 않음
function bar() {
    let x = 1;
    //let 이나 const 키워드로 선언된 변수는 같은 스코프 내에서 중복선언을 허용하지 않음
    // let x = 2; // 문법에러 발생
}
bar();


// 13.2 스코프의 종류
/**
 * 코드는 전역과 지역으로 구분할 수 있음
 * 이때 변수는 자신이 선언된 위치(전역 또는 지역)에 의해 자신이 유효한 범위인 스코프가 결정됨
 * 즉, 전역에서 선언된 변수는 전역 스코프를 갖는 전역 변수이고, 지역에서 선언된 변수는 지역 스코프를 갖는 지역 변수임
 */

// 13.2.1 전역과 전역 스코프
var x = "global x";
var y = "global y";
function outer() {
    var z = "outer's local z";

    console.log(x); // global x
    console.log(y); // global y
    console.log(z); // outer's local z

    function inner() {
        var x = "inner's local x";
        
        console.log(x); // inner's local x
        console.log(y); // global y
        console.log(z); // outer's local z
    }
    inner();
}
outer();

console.log(x);
console.log(y);

/**
 *  전역이란 코드의 가장 바깥 영역을 의미
 *  전역은 전역스코프를 만듬
 * 전역에 변수를 선언하면 전역스코프를 갖는 전역변수가 됨
 * 
 * 전역변수는 어디서든지 참조할 수 있음
 * 
 * 위 예제 코드 가장 바깥 영역인 전역에서 선언된 x 변수와 y변수는 전역변수임
 * 전역변수는 어디서든지 참조할 수 있으므로 함수 내부에서도 참조할 수 있음
 */


/**
 * 13.2.2 지역과 지역스코프
 * 지역이란 함수 몸체 내부를 의미
 * 지역은 지역스코프를 만듬
 * 지역에서 변수를 선언하면 지역스코프를 갖는 지역변수가 됨
 * 
 * 지역변수는 자신이 선언된 지역과 하위지역(중첩 함수)에서만 참조할수있다. 
 * 다시말해 지역변수는 자신의 지역 스코프와 하위 지역 스코프에서 유효
 * 
 * 13 - 2예저에서 outer 함수 내부에서 선언된 z변수는 지역 변수임
 * 지역 변수는 z는 자신의 지역스코프인 outer함수 내부와 하위 지역 스코프인 inner함수 내부에서 참조할 수 있음
 * 하지만, 지역 변수 z를 전역에서 참조하면 참조에러가 발생함
 * 
 * inner 함수 내부에서 선어노딘 x변수도 지역변수
 * 지역 변수 x는 자신의 ㅣㅈ역 스코프인 함수 inner내부에서만 참조할 수 있음
 * 하지만, 지역 변수 x를 전역 또는 inner 함수 내부 이외의 지역에서 참조하면 참조에러가 발생함
 * 
 * 그런데 inner 함수 내부에서 선언된 x 변수이외에 이름이 같은 전역 변수 x가 존재함
 * 이때 inner 함수내부에서 x 변수를 참조하면 전역 변수 x를  참조하는것이아니라 inner 함수 내부에서 선언된 x변수를 참조함
 * 
 * 이는 js엔진이 스코프체인을 통해 참조할 변수를 검색했기 떄문임
 */

//13.3 스코프 체인 
/**
 * 함수는 전역에서 정의할 수도 있고 함수 몸체 내부에서 정의할 수 도 있음
 * 함수 몸체 내부에서 함수가 정의 된 것을 '함수의 중첩'이라고함
 * 
 * 함수 몸체 내부에서 정의한 함수를 '중첩함수, 중첩함수를 포함하는 함수를 '외부함수'라고 한다'
 * 
 * 함수는 중첩될 수 있으므로 함수의 지역 스코프도 중첩될 수 있음
 * 이는 스코프가 함수의 중첩에 의해 계층적 구조를 갖는다는것을 의미
 * 
 * 다시말해, 중첩 함수의 지역 스코프는 중첩 함수를 포함하는 외부 함수의 지역 스코프와 계층적 구조를 갖는다
 * 이떄 외부 함수의 지역 스코프를 중첩함수의 상위 스코프라고함
 * 
 * 13-2 예저에서느 지역은 outer 함수의 지역과 inner 함수의 지역이 있다.
 * inner 함수는 outer함수의 중첩 함수임
 * 이때 outer 함수가 만든 지역 스코프는 inner 함수가 만든 지역 스코프의 상위 스코프
 * 그리고 outer 함수의 지역 스코프의 상위 스코프는 전역 스코프
 * 
 * 모든 지역 스코프의 최상위 스코프는 전역 스코프임
 * 스코프가 계층적으로 연결된것을 스코프체인이라고함
 * 스코프체인은 최상위 스코프인 전역스코프, 전역에서 선언된 outer함수의 지역 스코프, outer함수 내부에서 선언된 inner함수의 지역 스코프로 이뤄짐
 * 
 * 변수를 참조할떄 js엔진은 스코프 체인을 통해 변수를참조하는 코드의 스코프에서 시작하여 
 * 상위 스코프 방향으로 이동하며 선언된 변수를 검색함
 * 
 * 이를 통해 상위 스코프는 선언한 변수를 하위 스코프에서도 참조할 수 있음
 *
 * 스코프 체인은 물리적인 실체로 존재함
 * js엔진은 코드(전역코드와 함수코드)를 실항기에 앞서 위 그림과 유사 자료구조인 렉시컬 환경을 실제로 생성 
 * 
 * 변수 선언이 실행되면 변수 식별자가 이 자료구조(렉시컬 환경)에 key로 등록되고, 변수 할당이 일어나면
 * 이 자료구조의 변수 식별자에 해당하는 값을 변경
 * 
 * 변수의 검색도 이 자료구조 상에서 이뤄짐
 * 
 * 렉시컬 환경 
 * 스코프 체인은 실행 컨텍스트의 렉시컬 환경을 단방향으로 연결한것
 * 전역 렉시컬 환경은 코드가 로드되면 곧바로 생성되고 함수의 렉시컬 환경은 함수가 호출되면 곧바로 생성됨
 * 
 */

// 13,3,1 스코프체인에 의한 변수 검색
/**
 * js 엔진은 스코프 체인을 따라 변수를 참조하는 코드의 스코프에서 시작해서
 * 상위 스코프 방향으로 이동하며 선언된 변수를 검색
 * 
 * 절대 하위 스코프로 내려가면서 식별자를 검색하는일은 없음
 * 
 * 이는 상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조할 수 잇지만, 하위 스코프에서 유효한 변수를 상위 스코프에서 참조할 수 없다는걸 의미
 * 
 * 스코프체인으로 연결된 스코프의 계층적 구조는 부자 관계로 이뤄진 상속과 유사함
 */


//13.3.2 스코프체인에 의한 함수 검색

//13 - 6
//전역 함수
function foo() {
    console.log('global function foo');
}

function bar() {
    //중첩함수
    function foo() {
        console.log('local function foo');
    }
    foo();
}
bar();

/**
 * 함수 선언문으로 함수를 정의하면 런타임 이전에 함수 객체가 먼저 생성됨
 * 그리고 js엔진은 함수 이름과 동일한 이름의 식별자를 암묵적으로 선언하고 생성된 함수객체에 할당
 * 
 * 13 - 6 예제의 모든 함수는 함수 이름과 동일한 이름의 식별자에 할당됨
 * foo 함수를 호출하면 js엔진은 함수를 호출하기 위해 먼저 함수를 가리키는 식별자 foo를 검색
 * 
 * 이처럼 함수도 식별자에 할당되기 때문에 스코프를 갖게됨
 * 사실 함수는 식별자에 함수 객체가할당된 것 외에는 일반 변수와 다를바 없음
 * 
 * 따라서 스코프를 "변수를 검색할때 사용하는 규칙"이라고 표현하기 보다는 "식별자를 검색하는 규칙"이라고 표현이 더 적함
 */


//13.4 함수 레벨 스코프
/**
 * 지역은 함수 몸체 내부를 말하고 지역은 지역 스코프를 만든다고 했음
 * 이는 코드블록이 아닌 함수에 의해서만 지역 스코프가 생성된다는 의미
 * 
 * 대부분의 프로그래밍 언어는 함수 몸체만이 아니라 모든 코드블럭이 지역 스코프를 만듬
 * 이러한 특성을 블록 레벨 스코프라고 칭함
 * 
 * var 키워드로 선언된 변수는 오로지 함수의 코드블록만을 지역스코프로 인정함
 * 이러한 특성을 함수 레벨 스코프라고 지칭
 */

// 13 - 7
var x = 1;
if (true) {
    /**
     * var 키워드로 선언된 변수는 함수의 코드블록만을 지역스코프로 인정
     * 따라서 x는 전역변수 이미 선언된 전역 변수가 x가 있으므로 x 변수는 중복선언됨
     * 이는 의도치 않게 변수 갑이 변경되는 부작용을 발생시킴
     */
    var x = 10;
}
console.log(x); // 10

/**
 * 전역 변수 x가 선언되었고 if문의 코드 블록내에서도 x 변수가 선언되었음
 * 이때 if문의 코드 블록내에서 선언된 x변수는 전역변수
 * var 키워드로 선언된 변수는 함수 레벨 스코프만 인정하기 때문에 함수 밖에서 var 키워드로 선언된 변수는 
 * 코드 블록내에서 선언되었다 할지라도 모두 전역 번수임
 * 따라서 전역변수 x는 중복 선언되고 그 결과 의도치않은 전역 변수의 값이 재할당됨
 */

// 13 - 8
var i = 10;
//for 문에서 선언한 i는 전역변수 이미 선언된 전역변수 i가 있으므로 중복 선언됨
for (var i = 0; i < 5; i++) {
    console.log(i); // 0 1 2 3 4
}
//의도치 않게 변수의 값이 변경
console.log(i); // 5

/**
 * 블록 레벨 스코프를 지원하는 프로그래밍 언어에서는 for문에서 반복을 위해 선언된 i 변수가 for문의 코드 블록내에서만 유효한 지역변수임
 * 이변수를 for문 외부에서 사용할 일은 없기떄문이다
 * 하지만 var 키워드로 선언된 변수는 블록 레벨 스코프를 인정하지 않기 때문에 i변수는 전역변수가 됨
 * 따라서 전역변수 i는 중복 선언되고 그결과 의도치않은 전역 변수의 값이 재할당됨
 * 
 * var 키워드로 선언된 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정하지만 es6에서 도입된 
 * let, cosnt 키워드는 블록레벨 스코프를 지원함
 * 
 */



//13.5 렉시컬 스코프
//13 - 09
var x = 1;
function foo() {
    var x = 10;
    bar();
}

function bar() {
    console.log(x);
}
foo(); // ?
bar(); // ?

/**
 * 위코드는 bar 함수의 상위 소코프에따라 결정됨
 * 1. 함수를 어디서 호출했는지에 따라 함수의 상위 스코프를 결정
 * 2. 함수를 어디서 정의했는지에 따라 함수의 상위 스코프를 결정
 * 
 * 
 * 첫번째 방식의 함수의 상위 스코프를 결정한다면 bar함수의 상위 스코프는 foo 함수의 지역스코프와 전역 스코프
 * 
 * 함수의 상위 스코프를 결정한다면 bar함수의 스코프는 전역스코프
 * 
 * 첫번째 방식일 경우 동적 스코프라고함
 * 함수를 정의하는 시점에는 함수가 어디서 호출될지 알수 없음
 * 따라서 함수가 호출되는 시점에 동적으로 상위 스코프를 결정해야하기때문에 동적스코프라고함
 * 
 * 두번째 방식은 렉시컬 소크포 또는 정적 스코프라고함
 * 동적 스코프 방식처럼 상위 스코프가 동적으로 변하지 않고 함수 정의가 평가되는 시점에 상위 스코프가 정적으로 결정되기 때문에
 * 정적스코프라고함
 * 
 * 
 * js는 렉시컬 스코프를 따르므로 함수를 어디서 호출했는지가 아닌 함수를 어디서 정의했는지에 따라 상위 스코프가 결정됨
 * 함수가 호출된 위치는 상위 스코프결정에 어떠한 영향도 주지 않음
 * 즉, 함수의 상위 스코프는 언제나 자신이 정의된 스코프임
 * 
 * 이처럼 함수의 상위 스코프는 함수 정의가 실행될떄 정적으로 결정됨
 * 함수정의가 실행되어 생성된 함수 객체는 이렇게 결정된 상위 스코프를 기억함
 * 
 * 함수가 호출될때마다 함수의 상위 스코프를 참조할 필요가 있기때문
 */

